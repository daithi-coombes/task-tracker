/**
 * Use machine learning to predict what tasks belong to which project.
 * @author daithi coombes <webeire@gmail.com>
 */
"use strict"

var async   = require('async'),
  bayes     = require('bayes'),
  mongoose  = require('mongoose')

// models
var Task    = require('../models/Task'),
  Project   = require('../models/Project')

/**
 * sandbox for the taskTracker project.
 */
var TaskTracker = function TaskTrackerClass(){

  var self = this

  this.classifier = bayes()

  /**
   * View method.
   * @param  {Request}   req  The express request object.
   * @param  {Response}   res  The express response object.
   * @param  {Function} next The express callback.
   */
  this.view = function TaskTrackerView(req, res, next){

    var self = this

    //learn sample data
    learn(function(err){
      if(err) console.log(err)

      var json = []

      //classify
      if(req.query.string)
        json = categorize(req.query.string)


      //render
      res.render('naiveBayes', {
        title: 'naiveBayes',
        stateJson: json
      })
    })
  }

  /**
   * Learn docs already categorized.
   * @private
   * @param  {Function} cb      Callback function.
   * @return {TaskTracker} Returns self for chaining.
   */
  var learn = function TaskTrackerLearn(cb){

    var _cb = cb,
      _self = this,
      count = 0

    //get tasks that have been classified
    Task.find({projectID: {$ne: null}}, function(err, tasks){
      if(err) return cb(err, null)

      //loop tasks and learn in this classifier instance.
      var foo = 0
      async.eachSeries(
        tasks,
        function(task, cb){

          if(task.projectID == 'none')
            return cb()

          // case projectID to mongo.ObjectId()
          var projectId = (typeof task.projectID=='string')
            ? mongoose.Types.ObjectId(task.projectID)
            : task.projectID

          //get project name
          Project.findOne({_id: projectId}, function(err, project){
            if(err) return cb(err)

            //learn
            self.classifier.learn(task.title, project.title)
            count++
            cb()
          })
        },
        function done(){
          return _cb()
        }
      )
    })

    return self
  }

  /**
   * Categories a document.
   * @private
   * @param  {string} doc The document / text to categorize.
   * @return {json}     Returns the classifier & result {prediction, classifier}
   */
  var categorize = function TaskTrackerCategorize(doc){

    var project = self.classifier.categorize(doc)

    // serialize the classifier's state as a JSON string.
    var stateJson = self.classifier.toJson()

    // load the classifier back from its JSON representation.
    self.classifier = bayes.fromJson(stateJson)

    return {
      "prediction": project,
      "classifier": stateJson
    }
  }
}

/**
 * Get projects from db.
 * @param  {Function} cb Callback function(err, projects)
 * @return {array} Array of project docs
 */
TaskTracker.prototype.getProjects = function getProjects(cb){
  Project.find(function(err, projects){
    if(err) return cb(err, null)
    cb(null, projects)
  })
}

/**
 * Get known strings per project from db.
 * @param  {object}   project A project object {_id, title}
 * @param  {Function} cb      Callback function.
 */
TaskTracker.prototype.getStrings = function TaskTrackerGetStrings(project, cb){

  Task.find({projectId: project._id}, function(err, strings){
    if(err) return cb(err)
    return cb(null, strings)
  })
}

module.exports = new TaskTracker()
